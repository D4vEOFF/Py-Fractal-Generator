
from components.fractals.i_iterable import IFractalIterable
from ..event import Event

class LSystem(IFractalIterable):
    """
    L-System class for generating fractal strings based on production rules.
    """
    def __init__(self, axiom: str, rules: dict) -> None:
        """
        Initializes an instance of the LSystem class.
        
        Parameters:
            axiom (str): The initial symbol or axiom of the L-System.
            rules (dict): A dictionary representing the production rules for the L-System.
        """
        self._word = axiom
        self._rules = rules
        self._total_iterations = 0

        self._iteration_performed = Event()

    def add_iteration_performed_subscriber(self, method) -> None:
        """
        Adds a subscriber to be notified when an iteration is performed.
        
        Parameters:
            method: A callback function to be called when an iteration is performed.
        """
        self._iteration_performed += method

    def remove_iteration_performed_subscriber(self, method) -> None:
        """
        Removes a previously added subscriber.
        
        Parameters:
            method: The callback function to be removed.
        """
        self._iteration_performed -= method

    @property
    def word(self) -> str:
        """
        The current string generated by the L-System.
        
        Returns:
            str: The current L-System word.
        """
        return self._word
    
    @property
    def rules(self) -> dict:
        """
        The set of production rules used by the L-System.
        
        Returns:
            dict: The production rules of the L-System.
        """
        return self._rules
    
    @property
    def total_iterations(self) -> int:
        """
        The total number of iterations performed on the L-System.
        
        Returns:
            int: The total number of iterations.
        """
        return self._total_iterations
    
    def iterate(self, iteration_count: int) -> None:
        """
        Performs the specified number of iterations on the L-System.
        
        Parameters:
            iteration_count (int): The number of iterations to perform.
        """
        for _ in range(iteration_count):
            self._word = self._word.translate(str.maketrans(self._rules))
            self._total_iterations += 1
            self._iteration_performed(self._word, self._total_iterations)
